---
import { createRNG } from '@hasparus/rng'

import GrainOverlay from '../GrainOverlay/GrainOverlay.astro'
import '../styles.css'

const random = createRNG("gradients")

type HslaColor = {
	h: number
	s: number
	l: number
	a?: number;
}

const colors = Array.from({ length: 9 }).map((_): HslaColor => {
	const h = random() * 360;
	const s = random() * 25 + 75
	const l = random() * 30 + 50
	const a = 1;

	return { h, s, l, a };
})

const hslaString = ({ h, s, l, a = 1 }: HslaColor) => {
	return `hsl(${h} ${s}% ${l}% / ${a})`
}

const bgColor = (color: HslaColor) => {
	return `background: ${hslaString(color)};`
}

function randomPosition() {
  const x = Math.round((100 * random()) % 100);;
	const y = Math.round((100 * random()) % 100);;
	return `${x}% ${y}%`
};

function blend(...colors: HslaColor[]): HslaColor {
	let h: number = colors[0]!.h;
	let s: number = colors[0]!.s
	let l: number = colors[0]!.l
	let a: number = colors[0]!.a ?? 1

	for (const color of colors.slice(1)) {
		h += color.h;
		s += color.s;
		l += color.l;
		a += color.a ?? 1;
	}

	h /= colors.length;
	s /= colors.length;
	l /= colors.length;
	a /= colors.length;


	return { h, s, l, a }
}

function generateGradient(color1: HslaColor, color2: HslaColor, color3: HslaColor) {
	const colors = [color1, color2, color3];
	const { h, s, l } = blend(...colors)

	const positions = [`${random() * 15}% ${random() * 20}%`, `${85 + random() * 15}% ${random() * 25}%`, `${80 + random() * 20}% ${80 + random() * 20}%`];
	
	const createRadialGradient = (color: HslaColor, position: string) => {
		return [
			`radial-gradient(at ${position}`,
			`${hslaString(color)} 0px`,
			`transparent ${60 + 12 * random()}%)\n`
		].join(', ')
	}

	colors.push({ ...color1, h: (360 + (color1.h + (random() - 0.5) * 10)) % 360, a: random() * 0.25 })
	colors.push({ ...color2, h: (360 + (color2.h + (random() - 0.5) * 10)) % 360, a: random() * 0.25 })
	colors.push({ ...color3, h: (360 + (color3.h + (random() - 0.5) * 10)) % 360, a: random() * 0.25 })

	return {
		backgroundColor: `hsl(${h} ${(s + 100) % 100}% ${(l + 100) % 100}%)`,
		backgroundImage: colors.map((color, i) => {
			return createRadialGradient(color, positions[i] || randomPosition())
		}),
	}
}

function createTriad({ h, s, l }: HslaColor) {
	const color2 = { h: (360 + (h - 120 + random() * -20)) % 360, s: s + ((random() - 0.5) * 5), l: l + ((random() - 0.5) * 5) }
	const color3 = { h: (360 + (h + 120 + random() * -20)) % 360, s: s + ((random() - 0.5) * 5), l: l + ((random() - 0.5) * 5) }
	return [color2, color3] as const
}
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Gradients Experiment</title>
	</head>
	<body>
		<div class="grid grid-cols-3 content-center gap-2 p-2 w-[100vmin] mx-auto">
			{colors.map((color1) => {				
				const [color2, color3] = createTriad(color1)

				return (
					<div class="w-full h-0 pt-[100%] relative">
						<div class="absolute w-full top-0 h-1/3" style={bgColor(color1)}>
						</div>
						<div class="absolute w-full top-1/3 h-1/3" style={bgColor(color2)}>
						</div>
						<div class="absolute w-full top-2/3 h-1/3" style={bgColor(color3)} >
						</div>
						<div class="absolute left-[8px] top-0 w-[calc(100%_-_8px)] h-full bg-black" style={generateGradient(color1, color2, color3)} />
					</div>
				)
			})}
		</div>
		<GrainOverlay opacity={0.4} />
	</body>
</html>
